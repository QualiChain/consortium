const Tx = require('ethereumjs-tx').Transaction;
const Web3 = require('web3');
const web3 = new Web3('https://ropsten.infura.io/v3/66a470c1158f441cac9c502cd63d4b9b');

const account = '0x2CefB619218825C0c670D8E77f7039e0693E1dDC';
const privateKey = Buffer.from('26020431000baecb5e0ae79cc2fca00a8c4ce6e299889dcaa3a12b469383f2b5', 'hex');

const contractByteCode = '0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610250806100606000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306f5497e146100465780631692a942146100745780634cc16527146100b6575b600080fd5b6100726004803603602081101561005c57600080fd5b81019080803590602001909291905050506100ee565b005b6100a06004803603602081101561008a57600080fd5b8101908080359060200190929190505050610165565b6040518082815260200191505060405180910390f35b6100ec600480360360408110156100cc57600080fd5b8101908080359060200190929190803590602001909291905050506101a5565b005b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461014757600080fd5b6000801b600160008381526020019081526020016000208190555050565b60008060001b60016000848152602001908152602001600020541461019f57600160008381526020019081526020016000205490506101a0565b5b919050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101fe57600080fd5b806001600084815260200190815260200160002081905550505056fea2646970667358221220846cac5e84ea67c7ab47246965669067d49e1aabdd9834b48a75fc7c20ad497f64736f6c63430006010033';

web3.eth.getTransactionCount(account, (err,txCount) => {
  const txObject = {
    nonce: web3.utils.toHex(txCount),
    gasLimit: web3.utils.toHex(3000000),
    gasPrice: web3.utils.toHex(web3.utils.toWei('800','gwei')),
    data: contractByteCode
  };

  const tx = new Tx(txObject,{'chain':'ropsten'});
  tx.sign(privateKey);
  const serializedTx = tx.serialize();

  const txData = '0x' + serializedTx.toString('hex');

  web3.eth.sendSignedTransaction(txData, (err,txHash) => {
    if (err) {
      console.log(err);
    }
    else {
      console.log('Transaction hash: ', txHash);
    }
  })
})
return;
